/*
 * Copyright (c) 2019 ISPRAS (http://www.ispras.ru)
 * Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * ee the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file ("$this")
{
struct clk;

extern struct clk *ldv_clk_get(void);

// for arg_sign in clk1_arg_signs
extern void ldv_clk_disable{{ arg_sign.id }}(void);
extern int ldv_clk_enable{{ arg_sign.id }}(void);
extern void ldv_clk_unprepare{{ arg_sign.id }}(void);
extern int ldv_clk_prepare{{ arg_sign.id }}(void);
extern int ldv_clk_prepare_enable{{ arg_sign.id }}(void);
// endfor
}

around: call(struct clk *devm_clk_get(struct device *dev, const char *id))
{
	return ldv_clk_get();
}

around: call(struct clk *clk_get(struct device *dev, const char *con_id))
{
	return ldv_clk_get();
}

around: call(static inline void clk_disable_unprepare(struct clk *clk))
{
	ldv_clk_disable_$arg_sign1();
	ldv_clk_unprepare_$arg_sign1();
}

around: call(static inline int clk_prepare_enable(struct clk *clk))
{
	return ldv_clk_prepare_enable_$arg_sign1();
}

around: call(int clk_enable(struct clk *clk))
{
	return ldv_clk_enable_$arg_sign1();
}

around: call(void clk_disable(struct clk *clk))
{
	ldv_clk_disable_$arg_sign1();
}

around: call(int clk_prepare(struct clk *clk))
{
	return ldv_clk_prepare_$arg_sign1();
}

around: call(void clk_unprepare(struct clk *clk))
{
	ldv_clk_unprepare_$arg_sign1();
}
